name: CD - Deployment Pipeline

on:
  push:
    branches: [ main ]
    paths:
      - 'infrastructure/**'
      - 'scripts/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'dev'
        type: choice
        options:
          - dev
          - prod
      version:
        description: 'Deployment version (1, 2, or 3)'
        required: true
        default: '3'
        type: choice
        options:
          - '1'
          - '2'
          - '3'

env:
  LOCATION: 'westeurope'

jobs:
  deploy-dev:
    name: Deploy to Development
    runs-on: ubuntu-latest
    if: github.event_name == 'push' || github.event.inputs.environment == 'dev'
    environment: development
    
    env:
      ENVIRONMENT: 'dev'
      RESOURCE_GROUP: 'rg-swissre-dev'
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS_DEV }}
        
    - name: Create Resource Group
      run: |
        az group create \
          --name ${{ env.RESOURCE_GROUP }} \
          --location ${{ env.LOCATION }} \
          --tags Environment=Development Project=SwissRe Owner=JesusGracia
          
    - name: Deploy Infrastructure
      run: |
        VERSION=${{ github.event.inputs.version || '3' }}
        echo "Deploying version $VERSION to Development..."
        
        az deployment group create \
          --name "deploy-dev-$(date +%s)" \
          --resource-group ${{ env.RESOURCE_GROUP }} \
          --template-file infrastructure/main.bicep \
          --parameters infrastructure/parameters.dev.json \
          --parameters deploymentVersion=$VERSION \
          --mode Complete
          
    - name: Run validation script
      run: |
        chmod +x scripts/validate.sh
        ./scripts/validate.sh ${{ env.ENVIRONMENT }}
        
    - name: Health Check
      run: |
        echo "Running health check..."
        # Check VM status
        az vm show \
          --resource-group ${{ env.RESOURCE_GROUP }} \
          --name vm-swissre-dev \
          --query "provisioningState" \
          --output tsv
          
    - name: Update deployment status
      if: always()
      run: |
        echo "## üöÄ Development Deployment" >> $GITHUB_STEP_SUMMARY
        echo "- Environment: Development" >> $GITHUB_STEP_SUMMARY
        echo "- Version: ${{ github.event.inputs.version || '3' }}" >> $GITHUB_STEP_SUMMARY
        echo "- Status: ${{ job.status }}" >> $GITHUB_STEP_SUMMARY

  deploy-prod:
    name: Deploy to Production
    runs-on: ubuntu-latest
    if: github.event.inputs.environment == 'prod'
    environment: production
    
    env:
      ENVIRONMENT: 'prod'
      RESOURCE_GROUP: 'rg-swissre-prod'
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v3
      
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS_PROD }}
        
    - name: Backup current state
      run: |
        echo "Creating backup of current production state..."
        TIMESTAMP=$(date +%Y%m%d-%H%M%S)
        
        # Export resource group template
        az group export \
          --name ${{ env.RESOURCE_GROUP }} \
          --output json > backup-$TIMESTAMP.json || true
          
        # Upload backup to storage (if exists)
        if [ -f backup-$TIMESTAMP.json ]; then
          echo "Backup created: backup-$TIMESTAMP.json"
        fi
        
    - name: Create Resource Group
      run: |
        az group create \
          --name ${{ env.RESOURCE_GROUP }} \
          --location ${{ env.LOCATION }} \
          --tags Environment=Production Project=SwissRe Owner=JesusGracia
          
    - name: Deploy Infrastructure
      run: |
        VERSION=${{ github.event.inputs.version }}
        echo "Deploying version $VERSION to Production..."
        
        az deployment group create \
          --name "deploy-prod-$(date +%s)" \
          --resource-group ${{ env.RESOURCE_GROUP }} \
          --template-file infrastructure/main.bicep \
          --parameters infrastructure/parameters.prod.json \
          --parameters deploymentVersion=$VERSION \
          --mode Complete \
          --rollback-on-error
          
    - name: Post-deployment configuration
      run: |
        VERSION=${{ github.event.inputs.version }}
        
        # Configure based on version
        if [ "$VERSION" -ge "2" ]; then
          echo "Configuring Apache and HTTPS..."
          # Apache should be configured via cloud-init
        fi
        
        if [ "$VERSION" -eq "3" ]; then
          echo "Verifying Key Vault access..."
          VAULT_NAME=$(az keyvault list \
            --resource-group ${{ env.RESOURCE_GROUP }} \
            --query "[0].name" \
            --output tsv)
          echo "Key Vault: $VAULT_NAME"
        fi
        
    - name: Run validation script
      run: |
        chmod +x scripts/validate.sh
        ./scripts/validate.sh ${{ env.ENVIRONMENT }}
        
    - name: Security validation
      shell: pwsh
      run: |
        ./tests/security/test-compliance.ps1
        
    - name: Smoke tests
      run: |
        echo "Running smoke tests..."
        chmod +x tests/integration/test-connectivity.sh
        ./tests/integration/test-connectivity.sh ${{ env.ENVIRONMENT }}
        
    - name: Update deployment status
      if: always()
      run: |
        echo "## üöÄ Production Deployment Report" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Deployment Details" >> $GITHUB_STEP_SUMMARY
        echo "- Environment: Production" >> $GITHUB_STEP_SUMMARY
        echo "- Version: ${{ github.event.inputs.version }}" >> $GITHUB_STEP_SUMMARY
        echo "- Resource Group: ${{ env.RESOURCE_GROUP }}" >> $GITHUB_STEP_SUMMARY
        echo "- Status: ${{ job.status }}" >> $GITHUB_STEP_SUMMARY
        echo "- Timestamp: $(date)" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        
        if [ "${{ github.event.inputs.version }}" == "3" ]; then
          echo "### Version 3 Components" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Virtual Network with 4 Subnets" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Azure Firewall" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Azure Bastion" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Ubuntu VM (10.0.3.4)" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Apache with HTTPS" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ DNAT Rules" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Key Vault" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Managed Identity" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Monitoring" >> $GITHUB_STEP_SUMMARY
        fi

  rollback:
    name: Rollback on Failure
    runs-on: ubuntu-latest
    needs: [deploy-prod]
    if: failure() && github.event.inputs.environment == 'prod'
    environment: production
    
    steps:
    - name: Azure Login
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS_PROD }}
        
    - name: Rollback deployment
      run: |
        echo "‚ö†Ô∏è Production deployment failed. Initiating rollback..."
        
        # Get last successful deployment
        LAST_SUCCESSFUL=$(az deployment group list \
          --resource-group rg-swissre-prod \
          --query "[?properties.provisioningState=='Succeeded'] | [0].name" \
          --output tsv)
          
        if [ ! -z "$LAST_SUCCESSFUL" ]; then
          echo "Rolling back to: $LAST_SUCCESSFUL"
          # In real scenario, would redeploy last successful template
        else
          echo "No previous successful deployment found"
        fi
