#cloud-config
# Swiss Re Infrastructure - Version 3: Enterprise Features
# Includes V1 + V2 + Key Vault, Monitoring, Data Disk

package_update: true
package_upgrade: true
package_reboot_if_required: true

packages:
  # Version 1 & 2 packages
  - ufw
  - fail2ban
  - unattended-upgrades
  - curl
  - wget
  - net-tools
  - htop
  - vim
  - git
  - apache2
  - libapache2-mod-security2
  - libapache2-mod-evasive
  - certbot
  - ssl-cert
  # Version 3 packages
  - python3-pip
  - python3-venv
  - jq
  - azure-cli

write_files:
  # All previous configurations...
  - path: /etc/ssh/sshd_config.d/hardening.conf
    content: |
      PermitRootLogin no
      PasswordAuthentication yes
      PubkeyAuthentication yes
      X11Forwarding no
      MaxAuthTries 3
      ClientAliveInterval 300
      ClientAliveCountMax 2
      AllowUsers swissreadmin
    permissions: '0644'

  # Key Vault retriever script
  - path: /usr/local/bin/keyvault-retriever.py
    content: |
      #!/usr/bin/env python3
      """Azure Key Vault Secret Retriever - Swiss Re Infrastructure v3"""
      
      import os
      import sys
      import json
      import logging
      import requests
      from datetime import datetime
      
      logging.basicConfig(level=logging.INFO)
      logger = logging.getLogger(__name__)
      
      class KeyVaultRetriever:
          def __init__(self, vault_name):
              self.vault_name = vault_name
              self.vault_url = f"https://{vault_name}.vault.azure.net"
              self.api_version = "7.3"
              self.token = None
              
          def get_access_token(self):
              """Get access token from IMDS"""
              try:
                  url = "http://169.254.169.254/metadata/identity/oauth2/token"
                  params = {
                      'api-version': '2018-02-01',
                      'resource': 'https://vault.azure.net'
                  }
                  headers = {'Metadata': 'true'}
                  
                  response = requests.get(url, params=params, headers=headers, timeout=10)
                  response.raise_for_status()
                  
                  token_data = response.json()
                  self.token = token_data['access_token']
                  logger.info("Access token obtained")
                  return self.token
              except Exception as e:
                  logger.error(f"Failed to get token: {e}")
                  raise
                  
          def get_secret(self, secret_name):
              """Retrieve secret from Key Vault"""
              try:
                  if not self.token:
                      self.get_access_token()
                      
                  url = f"{self.vault_url}/secrets/{secret_name}"
                  params = {'api-version': self.api_version}
                  headers = {'Authorization': f'Bearer {self.token}'}
                  
                  response = requests.get(url, params=params, headers=headers, timeout=10)
                  response.raise_for_status()
                  
                  secret_data = response.json()
                  logger.info(f"Retrieved secret: {secret_name}")
                  return secret_data['value']
              except Exception as e:
                  logger.error(f"Failed to retrieve secret: {e}")
                  raise
                  
          def save_certificate(self, cert_name, cert_path, key_path):
              """Save SSL certificate and key"""
              try:
                  cert_bundle = self.get_secret(cert_name)
                  
                  # Save certificate
                  with open(cert_path, 'w') as f:
                      f.write(cert_bundle.split('-----END CERTIFICATE-----')[0] + '-----END CERTIFICATE-----')
                  os.chmod(cert_path, 0o644)
                  
                  # Save private key
                  with open(key_path, 'w') as f:
                      f.write(cert_bundle.split('-----END CERTIFICATE-----')[1])
                  os.chmod(key_path, 0o600)
                  
                  logger.info("Certificate and key saved")
              except Exception as e:
                  logger.error(f"Failed to save certificate: {e}")
                  raise
      
      def main():
          try:
              vault_name = os.environ.get('KEY_VAULT_NAME', 'kv-swissre-prod')
              retriever = KeyVaultRetriever(vault_name)
              
              # Retrieve SSL certificate
              retriever.save_certificate(
                  cert_name='ssl-certificate',
                  cert_path='/etc/ssl/certs/swissre.crt',
                  key_path='/etc/ssl/private/swissre.key'
              )
              
              logger.info("Key Vault retrieval completed")
              return 0
          except Exception as e:
              logger.error(f"Script failed: {e}")
              return 1
      
      if __name__ == "__main__":
          sys.exit(main())
    permissions: '0755'

  # Data disk mount script
  - path: /usr/local/bin/mount-data-disk.sh
    content: |
      #!/bin/bash
      # Mount data disk
      
      DEVICE="/dev/disk/azure/scsi1/lun0"
      MOUNT_POINT="/data"
      
      # Wait for disk
      while [ ! -e $DEVICE ]; do
          echo "Waiting for data disk..."
          sleep 5
      done
      
      # Format if needed
      if ! blkid $DEVICE; then
          mkfs.ext4 $DEVICE
      fi
      
      # Create mount point and mount
      mkdir -p $MOUNT_POINT
      mount $DEVICE $MOUNT_POINT
      
      # Add to fstab
      UUID=$(blkid -s UUID -o value $DEVICE)
      echo "UUID=$UUID $MOUNT_POINT ext4 defaults,nofail 0 2" >> /etc/fstab
      
      # Set permissions
      chmod 755 $MOUNT_POINT
      
      echo "Data disk mounted at $MOUNT_POINT"
    permissions: '0755'

  # Monitoring agent configuration
  - path: /etc/azure-monitor/config.json
    content: |
      {
        "version": "1.0",
        "metrics": {
          "enabled": true,
          "interval": 60
        },
        "logs": {
          "enabled": true,
          "sources": [
            "/var/log/syslog",
            "/var/log/auth.log",
            "/var/log/apache2/access.log",
            "/var/log/apache2/error.log"
          ]
        }
      }
    permissions: '0644'

  # Apache SSL configuration (updated for Key Vault)
  - path: /etc/apache2/sites-available/swissre-ssl.conf
    content: |
      <VirtualHost *:443>
          ServerName swissre.local
          DocumentRoot /var/www/html
          
          SSLEngine on
          SSLCertificateFile /etc/ssl/certs/swissre.crt
          SSLCertificateKeyFile /etc/ssl/private/swissre.key
          
          SSLProtocol -all +TLSv1.2 +TLSv1.3
          SSLCipherSuite HIGH:!aNULL:!MD5:!3DES
          SSLHonorCipherOrder on
          
          Header always set Strict-Transport-Security "max-age=31536000; includeSubDomains"
          Header always set X-Frame-Options "DENY"
          Header always set X-Content-Type-Options "nosniff"
          Header always set X-XSS-Protection "1; mode=block"
          Header always set Content-Security-Policy "default-src 'self'"
          Header always set Referrer-Policy "strict-origin-when-cross-origin"
          
          ErrorLog ${APACHE_LOG_DIR}/error.log
          CustomLog ${APACHE_LOG_DIR}/access.log combined
          
          <Directory /var/www/html>
              Options -Indexes +FollowSymLinks
              AllowOverride All
              Require all granted
          </Directory>
      </VirtualHost>
      
      <VirtualHost *:80>
          ServerName swissre.local
          Redirect permanent / https://swissre.local/
      </VirtualHost>
    permissions: '0644'

  # Enhanced web page
  - path: /var/www/html/index.html
    content: |
      <!DOCTYPE html>
      <html>
      <head>
          <title>Swiss Re Infrastructure Challenge</title>
          <style>
              body { 
                  font-family: 'Segoe UI', Arial; 
                  text-align: center; 
                  padding: 50px;
                  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                  color: white;
              }
              .container {
                  background: rgba(255,255,255,0.1);
                  border-radius: 20px;
                  padding: 40px;
                  backdrop-filter: blur(10px);
              }
              .status { 
                  color: #4ade80; 
                  font-weight: bold;
                  font-size: 1.2em;
              }
              .features {
                  display: grid;
                  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
                  gap: 20px;
                  margin-top: 30px;
              }
              .feature {
                  background: rgba(255,255,255,0.1);
                  padding: 20px;
                  border-radius: 10px;
              }
          </style>
      </head>
      <body>
          <div class="container">
              <h1>Swiss Re Infrastructure Challenge</h1>
              <h2>Version 3 - Enterprise Features</h2>
              <p class="status">✓ All Systems Operational</p>
              
              <div class="features">
                  <div class="feature">
                      <h3>🔒 Security</h3>
                      <p>TLS 1.2+<br>Key Vault<br>Managed Identity</p>
                  </div>
                  <div class="feature">
                      <h3>📊 Monitoring</h3>
                      <p>Log Analytics<br>Metrics<br>Alerts</p>
                  </div>
                  <div class="feature">
                      <h3>💾 Storage</h3>
                      <p>128GB Data Disk<br>Encrypted<br>Backup Ready</p>
                  </div>
                  <div class="feature">
                      <h3>🚀 Performance</h3>
                      <p>Optimized<br>Scalable<br>Reliable</p>
                  </div>
              </div>
          </div>
      </body>
      </html>
    permissions: '0644'

runcmd:
  # Configure UFW firewall
  - ufw default deny incoming
  - ufw default allow outgoing
  - ufw allow from 10.0.2.0/27 to any port 22 comment 'SSH from Bastion'
  - ufw allow from 10.0.1.0/26 to any port 80 comment 'HTTP from Firewall'
  - ufw allow from 10.0.1.0/26 to any port 443 comment 'HTTPS from Firewall'
  - ufw --force enable
  
  # Install Python packages
  - pip3 install requests azure-identity azure-keyvault-secrets
  
  # Mount data disk
  - /usr/local/bin/mount-data-disk.sh
  
  # Set environment variables
  - echo "export KEY_VAULT_NAME='kv-swissre-${ENVIRONMENT}'" >> /etc/environment
  
  # Retrieve certificates from Key Vault (after delay for identity)
  - sleep 30
  - python3 /usr/local/bin/keyvault-retriever.py || /bin/true
  
  # Enable Apache modules
  - a2enmod ssl headers rewrite security2 evasive
  - a2dissite 000-default
  - a2ensite swissre-ssl
  
  # Start services
  - systemctl restart apache2
  - systemctl enable apache2
  - systemctl restart sshd
  - systemctl enable fail2ban
  - systemctl start fail2ban
  
  # Configure Log Analytics agent
  - |
    if [ -f /opt/microsoft/omsagent/bin/omsadmin.sh ]; then
        /opt/microsoft/omsagent/bin/omsadmin.sh -w ${LOG_ANALYTICS_WORKSPACE_ID} -s ${LOG_ANALYTICS_KEY}
    fi
  
  # Create comprehensive health check
  - |
    cat > /usr/local/bin/health-check.sh << 'EOF'
    #!/bin/bash
    echo "═══════════════════════════════════════════"
    echo "   Swiss Re Infrastructure Health Check    "
    echo "═══════════════════════════════════════════"
    echo "Timestamp: $(date)"
    echo ""
    echo "SYSTEM INFO:"
    echo "  Hostname: $(hostname)"
    echo "  Uptime: $(uptime -p)"
    echo "  Kernel: $(uname -r)"
    echo ""
    echo "RESOURCES:"
    echo "  CPU: $(top -bn1 | grep "Cpu(s)" | awk '{print $2}' | cut -d'%' -f1)% used"
    echo "  Memory: $(free -h | grep Mem | awk '{print $3 "/" $2}')"
    echo "  Root Disk: $(df -h / | tail -1 | awk '{print $3 "/" $2 " (" $5 ")"}')"
    echo "  Data Disk: $(df -h /data 2>/dev/null | tail -1 | awk '{print $3 "/" $2 " (" $5 ")"}' || echo 'Not mounted')"
    echo ""
    echo "NETWORK:"
    echo "  IP: $(ip -4 addr show | grep inet | grep -v 127.0.0.1 | awk '{print $2}')"
    echo "  Firewall: $(ufw status | head -1)"
    echo ""
    echo "SERVICES:"
    echo "  SSH: $(systemctl is-active sshd)"
    echo "  Apache: $(systemctl is-active apache2)"
    echo "  Fail2ban: $(systemctl is-active fail2ban)"
    echo ""
    echo "SECURITY:"
    echo "  HTTPS: $(netstat -tlpn 2>/dev/null | grep :443 > /dev/null && echo 'Active' || echo 'Inactive')"
    echo "  Certificate: $(openssl x509 -in /etc/ssl/certs/swissre.crt -noout -dates 2>/dev/null | head -1 || echo 'Not found')"
    echo "  Key Vault: $(test -f /usr/local/bin/keyvault-retriever.py && echo 'Configured' || echo 'Not configured')"
    echo ""
    echo "MONITORING:"
    echo "  Agent: $(pgrep -f omsagent > /dev/null && echo 'Running' || echo 'Not running')"
    echo "  Logs: $(ls -la /var/log/*.log 2>/dev/null | wc -l) log files"
    echo ""
    echo "═══════════════════════════════════════════"
    EOF
  - chmod +x /usr/local/bin/health-check.sh
  
  # Run initial health check
  - /usr/local/bin/health-check.sh > /var/log/health-check.log
  
  # Log deployment
  - echo "Version 3 Enterprise deployment completed at $(date)" > /var/log/deployment.log

final_message: "Swiss Re Infrastructure Version 3 - Enterprise Features Deployed Successfully"
